package main

import (
	"github.com/go-telegram-bot-api/telegram-bot-api"
	"golang.org/x/net/proxy"
	"log"
	"net"
	"net/http"
	"context"
	"github.com/tishchenko/emias-ap-queues-bot/config"
	"github.com/tishchenko/emias-ap-queues-bot/model"
	"time"
	"sort"
	"strconv"
	"encoding/json"
	"strings"
)

const version = "1.1.0"

type ApBot struct {
	Bot        *tgbotapi.BotAPI
	Chats      map[int64]int64
	Model      *model.Model
	AlarmLogic config.QueuesAlarmLogic
	InfoUrl    string
}

type QMesData struct {
	Name  string
	Type  string
	From  time.Time
	To    time.Time
	Delta int
}

var queueNames = []string{"APPOINTMENT", "SELF_APPOINTMENT", "UNMET_DEMAND", "AR_SCHEDULE_UPDATED"}
var queueTypes = []string{"", "EQ"}

func NewApBot(conf *config.Config) *ApBot {
	bot := &ApBot{}
	bot.Chats = map[int64]int64{}

	var err error
	var client *http.Client

	if conf == nil {
		conf = &config.Config{TelApiToken: "543460319:AAER5gKDmF0k3S6BNDhsm8v07iHspL8A4_M"}
	}

	if conf.Proxy != nil {
		auth := &proxy.Auth{conf.Proxy.User, conf.Proxy.Password}

		dialer, err := proxy.SOCKS5("tcp", conf.Proxy.IpAddr+":"+conf.Proxy.Port, auth, proxy.Direct)
		if err != nil {
			log.Panic(err)
		}
		transport := &http.Transport{}
		transport.DialContext = func(ctx context.Context, network, addr string) (net.Conn, error) {
			return dialer.Dial(network, addr)
		}
		client = &http.Client{Transport: transport}
	} else {
		client = &http.Client{}
	}

	bot.Model = model.NewModelWithFileName(conf.ModelFileName)

	bot.Bot, err = tgbotapi.NewBotAPIWithClient(conf.TelApiToken, client)
	if err != nil {
		log.Panic(err)
	}

	bot.Bot.Debug = true

	log.Printf("Authorized on account %s", bot.Bot.Self.UserName)

	bot.AlarmLogic = *conf.AlarmLogic
	bot.InfoUrl = conf.InfoUrl

	return bot
}

func (bot *ApBot) Run() {

	m := make(chan string)
	go bot.poll(m)
	go bot.sendBroadcastMessage(m)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, _ := bot.Bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		if update.Message.IsCommand() {

			switch update.Message.Command() {
			case "start":
				bot.Chats[update.Message.Chat.ID] = update.Message.Chat.ID
				bot.sendMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç, "+update.Message.From.FirstName+" \xE2\x9C\x8C\n –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
			case "stop":
				delete(bot.Chats, update.Message.Chat.ID)
				bot.sendMessage(update.Message.Chat.ID, "–ù—É, —Ç—ã —ç—Ç–æ, –∑–æ–≤–∏ –µ—Å–ª–∏ —á—Ç–æ...")
				bot.sendMessage(update.Message.Chat.ID, "\xF0\x9F\x92\xA4")
			case "help":
				help := "–î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n" +
					"/start - –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π\n" +
					"/stop - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π\n" +
					"/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\n" +
					"/queue (queueName [queueType]) - –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ queueName (<b>" + strings.Join(queueNames, ", ") + "</b>) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è; queueType - –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ normal queue, –µ—Å–ª–∏ <b>EQ</b>, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ exception queue\n"
					//"/rules - –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
				bot.sendMessage(update.Message.Chat.ID, help)
			case "health":
				bot.printHealth(update.Message.Chat.ID)
			case "queue":
				bot.printQueueStat(update.Message.Chat.ID, update.Message.CommandArguments())
			case "rules":
				bot.printRules(update.Message.Chat.ID)
			}
		}

	}
}

func (bot *ApBot) sendBroadcastMessage(m chan string) {
	for {
		message := <-m
		for chatID := range bot.Chats {
			bot.sendMessage(chatID, message)
		}

		print("+")
	}
}

func (bot *ApBot) poll(m chan string) {
	for {
		m <- bot.readQueuesStatFile()
		time.Sleep(time.Duration(bot.AlarmLogic.PollInterval) * time.Second)
	}
}

func (bot *ApBot) readQueuesStatFile() string {
	bot.Model.Refresh()

	mesData := &[]QMesData{}

	bot.readQueueStat(mesData, bot.Model.NormalQueues, "")
	bot.readQueueStat(mesData, bot.Model.ExceptionQueues, "Exception Queue")

	return bot.generateAlarmMessage(*mesData)
}

func (bot *ApBot) readQueueStat(mesData *[]QMesData, queuesInfo map[string][]model.QueueInfo, queueType string) {
	for name, queues := range queuesInfo {
		sort.Slice(queues, func(i, j int) bool {
			return queues[i].DateTime.After(queues[j].DateTime)
		})

		if len(queues) < 2 || queues[0].Length == nil || queues[1].Length == nil {
			continue
		}

		delta := *queues[0].Length - *queues[1].Length

		var validDelta int
		if queueType == "" {
			validDelta = (*bot.AlarmLogic.NormalQueues)[name]
		} else {
			validDelta = (*bot.AlarmLogic.ExceptionQueues)[name]
		}

		if delta >= validDelta {
			*mesData = append(*mesData, QMesData{
				name,
				queueType,
				queues[1].DateTime,
				queues[0].DateTime,
				delta,
			})
		}

	}
}

func (bot *ApBot) printQueueStat(chatID int64, queueName string) {

	queueType := ""
	posQueueNames := "–í–∞—Ä–∏–∞–Ω—Ç—ã: <b>" + strings.Join(queueNames, ", ") + "</b>"

	s := strings.Split(queueName, " ")
	if strings.TrimSpace(queueName) == "" {
		bot.sendMessage(chatID, "‚õî –ù–µ –∑–∞–¥–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. "+posQueueNames)
		return
	}
	if !stringInSlice(s[0], queueNames) {
		bot.sendMessage(chatID, "‚õî –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏! "+posQueueNames)
		return
	}
	if len(s) > 1 && !stringInSlice(s[1], queueTypes) {
		bot.sendMessage(chatID, "‚õî –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –æ—á–µ—Ä–µ–¥–∏! –ó–Ω–∞—é —Ç–æ–ª—å–∫–æ <b>EQ</b>")
		return
	} else {
		if len(s) > 1 {
			queueType = s[1]
		}
	}

	var queues map[string][]model.QueueInfo
	if queueType == "" {
		queues = bot.Model.NormalQueues
	} else {
		queues = bot.Model.ExceptionQueues
	}
	for name, queue := range queues {
		if name != s[0] {
			continue
		}
		bot.sendMessage(chatID, bot.generateStatMessage(queue))
	}
}

func (bot *ApBot) printRules(chatID int64) {
	rules, _ := json.Marshal(bot.AlarmLogic)
	bot.sendMessage(chatID, "<code>" + string(rules) + "</code>")
}

func (bot *ApBot) printHealth(chatID int64) {
	var mes string
	if intInSlice(chatID, bot.Chats) {
		mes = "‚ù§ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω."
	} else {
		mes = "‚õî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω! –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
	}

	mes += "\n–í—Å–µ–≥–¥–∞ –≤–∞—à <i>ApAggregateQueuesBot –≤–µ—Ä—Å–∏–∏ "+version+"</i>\n-=[ ü§ñ ]=-"
	bot.sendMessage(chatID, mes)
}

func (bot *ApBot) generateAlarmMessage(mesData []QMesData) string {
	var mes string

	for _, m := range mesData {
		mes += "\xF0\x9F\x9A\xA8 –û—á–µ—Ä–µ–¥—å " +
			m.Type +
			" <b>" +
			m.Name +
			"</b> –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ <b>" +
			strconv.Itoa(m.Delta) +
			"</b> –≤ –ø–µ—Ä–∏–æ–¥ —Å <b>" +
			m.From.Format("2006-01-02 15:04") +
			"</b> –ø–æ <b>" +
			m.To.Format("2006-01-02 15:04") +
			"</b>\n\n"
	}

	return mes
}

func (bot *ApBot) generateStatMessage(queueInfo []model.QueueInfo) string {

	mes := "üìà " +
		"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–µ " +
		"<a href=\"" +
		bot.InfoUrl +
		"\">" +
		bot.InfoUrl +
		"</a>\n<code>"

	for i, statInfo := range queueInfo {
		if i > 11 {
			break
		}
		mes += statInfo.DateTime.Format("2006-01-02 15:04") +
			"     " +
			strconv.Itoa(*statInfo.Length) +
			"\n"

	}
	mes += "</code>"

	return mes
}

func (bot *ApBot) sendMessage(chatID int64, message string) {
	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = tgbotapi.ModeHTML
	bot.Bot.Send(msg)
}

func stringInSlice(a string, list []string) bool {
	for _, b := range list {
		if b == a {
			return true
		}
	}
	return false
}

func intInSlice(a int64, list map[int64]int64) bool {
	for _, v := range list {
		if v == a {
			return true
		}
	}
	return false
}